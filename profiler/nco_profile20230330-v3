Timer unit: 1e-07 s

Total time: 58.4183 s
File: C:\Users\tdais\Desktop\GRforM\Profiler_test_func.py
Function: test_NCOGR at line 253

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   253                                           def test_NCOGR(main_path, res_params, Distance, Rlist_dict):
   254         1         37.0     37.0      0.0      start_time = time.time()
   255                                               # trainを全てのセルで終えてる前提
   256         1          8.0      8.0      0.0      (expIndex, leakingRate, resSize, spectralRadius, inSize, outSize,
   257         1          7.0      7.0      0.0       initLen, trainLen, testLen,
   258         2         15.0      7.5      0.0       reg, seed_num, conectivity) = res_params
   259                                           
   260                                               #各testの時に学習するmeshのdict: Rlist_dict(input)
   261                                           
   262         1        228.0    228.0      0.0      Rlist = list(Rlist_dict.keys())  # Reservoir Mesh list
   263                                           
   264         3       2759.0    919.7      0.0      print(str((time.time() - start_time)//1) +
   265         2         11.0      5.5      0.0            "s " + "NotCoopGeoReservoir Start...")
   266                                               
   267         1         18.0     18.0      0.0      subsection_time = time.time()
   268        95       1910.0     20.1      0.0      for t_r, r in enumerate(Rlist):
   269        95  148517103.0 1563337.9     25.4          tmp = load_trained_data(main_path, res_params, r)
   270        95       4389.0     46.2      0.0          if type(tmp) != type({"A": 1}):
   271                                                       print(tmp)
   272                                                       return
   273        95    1604230.0  16886.6      0.3          (Win, W, X, Wout, x, Data) = tmp["trained_data"]
   274                                           
   275       190     238462.0   1255.1      0.0          (In, Out) = dis_in_out(
   276        95       3637.0     38.3      0.0              Data[0:, trainLen:trainLen+testLen], inSize, outSize, Distance)
   277                                           
   278        95       3190.0     33.6      0.0          trainO = Data[0:outSize, trainLen:trainLen+testLen]
   279                                           
   280        95       1399.0     14.7      0.0          u = In[0:inSize, 0:1]
   281                                           
   282        95       3321.0     35.0      0.0          Y = np.zeros((outSize, testLen//Distance))
   283        95      10800.0    113.7      0.0          UU = np.zeros((outSize, testLen//Distance * Distance))
   284        95      30743.0    323.6      0.0          XX = np.zeros((resSize, testLen//Distance * Distance))
   285                                           
   286        95        735.0      7.7      0.0          a = leakingRate
   287                                           
   288                                                   # NoCop
   289      9025      77522.0      8.6      0.0          for t in range(testLen//Distance):
   290    276830    2531795.0      9.1      0.4              for d_i in range(Distance):
   291                                                           # Compute
   292    535800   27440616.0     51.2      4.7                  x = (1-a)*x + a * \
   293    267900  311210577.0   1161.7     53.3                      np.tanh(np.dot(Win, np.vstack((1, u))) + np.dot(W, x))
   294    267900   77376288.0    288.8     13.2                  u = np.dot(Wout, np.vstack((1, x)))
   295                                           
   296                                                           # 4D
   297                                                           # XX[:, t*Distance+d_i] = np.vstack((x))[:, 0]
   298    267900    8939363.0     33.4      1.5                  UU[:, t*Distance+d_i] = u[0:, 0]
   299                                           
   300                                                           # Self Organize
   301                                                           # なし
   302                                           
   303                                                           # set Y
   304    267900    5663458.0     21.1      1.0                  Y[:, t] = u[0:, 0]
   305                                           
   306                                                       # for next time
   307      8930     139754.0     15.6      0.0              if t+2 < In.shape[1]:
   308      8740     161880.0     18.5      0.0                  u = In[0:inSize, t+1:t+2]
   309                                                   
   310        95       7403.0     77.9      0.0          test_path = main_path + str(res_params[0])
   311      1140      11187.0      9.8      0.0          for prm_i in range(1,len(res_params)):
   312      1045      25449.0     24.4      0.0              test_path += "-" + str(res_params[prm_i])
   313        95       1032.0     10.9      0.0          test_path += "/"
   314        95       1641.0     17.3      0.0          test_path += str(Distance)+"step-test-nco/"
   315        95     139868.0   1472.3      0.0          if not os.path.isdir(test_path):
   316                                                       os.mkdir(test_path)
   317                                                       print("make " + str(test_path))
   318                                                   
   319        95       7639.0     80.4      0.0          test_file = test_path + str(r)
   320                                                   
   321                                                   # np.savez_compressed(test_file, Y=Y, UU=UU, XX=XX,
   322                                                   #                     Out=Out, trainO=trainO)
   323                                           
   324        95       2327.0     24.5      0.0          rate = 100 * t_r/len(Rlist)
   325        95       5043.0     53.1      0.0          if sprit_printer(t_r,len(Rlist),sprit_num=40):
   326         4       5861.0   1465.2      0.0              print("{:.2f}".format(rate) + "% done " + "{:.2f}".format(time.time() -start_time) + " s passed, this subset needs " + "{:.2f}".format(time.time() - subsection_time)
   327         2         18.0      9.0      0.0                    + " s")
   328        95       3344.0     35.2      0.0          subsection_time = time.time()
   329                                                   
   330        95       2283.0     24.0      0.0          if (time.time() -start_time) > 60:
   331         1       3071.0   3071.0      0.0              print("Temporaly END")
   332         2       2535.0   1267.5      0.0              print("{:.2f}".format(rate) + "% done " + "{:.2f}".format(time.time() -start_time) + " s passed, this subset needs " + "{:.2f}".format(time.time() - subsection_time)
   333         1         22.0     22.0      0.0                    + " s")
   334         1         38.0     38.0      0.0              return
   335                                           
   336                                               print("All completed")
   337                                               print("{:.2f}".format(time.time() -start_time) + " s passed")
   338                                               return

