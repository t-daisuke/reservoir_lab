Timer unit: 1e-07 s

Total time: 60.0644 s
File: C:\Users\tdais\Desktop\GRforM\Profiler_train_func.py
Function: train_GR at line 399

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   399                                           def train_GR(main_path, res_params, raw_data_subset, mesh_code, is_update=False):
   400         1         12.0     12.0      0.0      (expIndex, leakingRate, resSize, spectralRadius, inSize, outSize,
   401         1          6.0      6.0      0.0       initLen, trainLen, testLen,
   402         2         25.0     12.5      0.0       reg, seed_num, conectivity) = res_params
   403                                               
   404         1         25.0     25.0      0.0      start_time = time.time()
   405        40       3269.0     81.7      0.0      while(time.time() - start_time < 60):
   406        39       3194.0     81.9      0.0          train_path = main_path + str(res_params[0])
   407       468       5243.0     11.2      0.0          for prm_i in range(1,len(res_params)):
   408       429       9893.0     23.1      0.0              train_path += "-" + str(res_params[prm_i])
   409        39        367.0      9.4      0.0          train_path += "/"
   410                                           
   411        39      64113.0   1643.9      0.0          if not os.path.isdir(train_path):
   412                                                       os.mkdir(train_path)
   413        39        590.0     15.1      0.0          train_path += "train/"
   414        39      22097.0    566.6      0.0          if not os.path.isdir(train_path):
   415                                                       os.mkdir(train_path)
   416                                                       print("make " + str(train_path))
   417                                           
   418                                                   # mesh_codeのデータがある→読み出し
   419        39       3628.0     93.0      0.0          trained_file = train_path + str(mesh_code)
   420                                                   # if os.path.isfile(trained_file+".npz") and (not is_update):
   421                                                   #     trained_data = np.load(trained_file+".npz")
   422                                                   #     (Win, W, X, Wout, x, Data) = (
   423                                                   #         trained_data["Win"], trained_data["W"], trained_data["X"], trained_data["Wout"],
   424                                                   #         trained_data["x"], trained_data["Data"])
   425                                                   #     return (Win, W, X, Wout, x, Data)
   426                                           
   427                                                   # Train
   428        39      51059.0   1309.2      0.0          Data = raw_data_subset * 10**expIndex
   429        39      50876.0   1304.5      0.0          Data = Data.astype(np.float64)
   430                                                   # trainは1 timeずつ
   431        39       2320.0     59.5      0.0          In = Data[0:inSize, 0:trainLen+testLen-1]  # 入力
   432        39        683.0     17.5      0.0          Out = Data[0:outSize, 1:trainLen+testLen]  # 出力
   433        39        331.0      8.5      0.0          a = leakingRate
   434        39       6562.0    168.3      0.0          np.random.seed(seed_num)
   435        39      57401.0   1471.8      0.0          Win = (np.random.rand(resSize, 1+inSize) - 0.5) * 1  # -0.5~0.5の一様分布
   436        39   13696791.0 351199.8      2.3          W = create_sparse_rand_matrix(resSize, resSize, conectivity)
   437        39  299611028.0 7682334.1     49.9          rhoW = max(abs(linalg.eig(W)[0]))
   438        39     345605.0   8861.7      0.1          W *= spectralRadius / rhoW
   439        39     977669.0  25068.4      0.2          X = np.zeros((1+resSize, trainLen-initLen))
   440        39       2323.0     59.6      0.0          Yt = Out[0:outSize, initLen:trainLen]  # init ~ train-1でtrain(train-init分)
   441                                           
   442                                                   
   443                                                   # run the reservoir with the Data and collect X
   444        39       2664.0     68.3      0.0          x = np.zeros((resSize, 1))
   445    168519    2008729.0     11.9      0.3          for t in range(trainLen):
   446    168480    4135371.0     24.5      0.7              u = In[0:inSize, t:t+1]
   447    168480  204545895.0   1214.1     34.1              x = (1-a)*x + a*np.tanh(np.dot(Win, np.vstack((1, u))) + np.dot(W, x))  # 瞬間の値
   448    168480    2841345.0     16.9      0.5              if t >= initLen:
   449    112320   52573399.0    468.1      8.8                  X[:, t-initLen] = np.vstack((1, x))[:, 0]
   450       117   18700294.0 159831.6      3.1          Wout = linalg.solve(np.dot(X, X.T) + reg *
   451        78     920712.0  11804.0      0.2                              np.eye(1+resSize), np.dot(X, Yt.T)).T
   452                                           
   453                                                   # save
   454                                                   # np.savez_compressed(trained_file, Win=Win, W=W, X=X,
   455                                                   #                     Wout=Wout, x=x, Data=Data)
   456                                           
   457         1         21.0     21.0      0.0      return (Win, W, X, Wout, x, Data)

